
# gamut
from gamut.gltf import Gltf
from gamut.math import FVector3, FVector3Array, U16Array
# python
from pathlib import Path

DIRECTORY = Path(__file__).resolve().parent


def test_box() -> None:
    with open(DIRECTORY / 'Box.glb', 'rb') as f:
        gltf = Gltf(f)

    assert len(gltf.buffers) == 1
    buffer = gltf.buffers[0]
    assert isinstance(buffer.data, memoryview)
    assert bytes(buffer.data) == (
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00'
        b'\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80?\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?'
        b'\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x80\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00'
        b'\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?'
        b'\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?'
        b'\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00'
        b'\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00'
        b'\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00'
        b'\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?'
        b'\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00'
        b'\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?\x00'
        b'\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf'
        b'\x00\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00'
        b'\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00'
        b'\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00'
        b'\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00'
        b'\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00'
        b'\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00\x00\x00'
        b'\xbf\x00\x00\x01\x00\x02\x00\x03\x00\x02\x00\x01\x00\x04\x00\x05\x00'
        b'\x06\x00\x07\x00\x06\x00\x05\x00\x08\x00\t\x00\n\x00\x0b\x00\n\x00'
        b'\t\x00\x0c\x00\r\x00\x0e\x00\x0f\x00\x0e\x00\r\x00\x10\x00\x11\x00'
        b'\x12\x00\x13\x00\x12\x00\x11\x00\x14\x00\x15\x00\x16\x00\x17\x00'
        b'\x16\x00\x15\x00'
    )

    assert len(gltf.buffer_views) == 2
    buffer_view_0 = gltf.buffer_views[0]
    assert isinstance(buffer_view_0.get_data(1), memoryview)
    assert bytes(buffer_view_0.get_data(1)) == (
        b'\x00\x00\x01\x00\x02\x00\x03\x00\x02\x00\x01\x00\x04\x00\x05\x00'
        b'\x06\x00\x07\x00\x06\x00\x05\x00\x08\x00\t\x00\n\x00\x0b\x00\n\x00'
        b'\t\x00\x0c\x00\r\x00\x0e\x00\x0f\x00\x0e\x00\r\x00\x10\x00\x11\x00'
        b'\x12\x00\x13\x00\x12\x00\x11\x00\x14\x00\x15\x00\x16\x00\x17\x00'
        b'\x16\x00\x15\x00'
    )

    buffer_view_1 = gltf.buffer_views[1]
    assert isinstance(buffer_view_1.get_data(1), memoryview)
    assert bytes(buffer_view_1.get_data(1)) == (
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00'
        b'\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80?\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?'
        b'\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x80\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00'
        b'\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?'
        b'\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?'
        b'\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00'
        b'\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00'
        b'\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00'
        b'\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?'
        b'\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00'
        b'\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00\x00\x00?\x00'
        b'\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf'
        b'\x00\x00\x00?\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00'
        b'\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00'
        b'\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00'
        b'\x00?\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00'
        b'\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00\xbf\x00\x00\x00?\x00'
        b'\x00\x00\xbf\x00\x00\x00\xbf\x00\x00\x00?\x00\x00\x00?\x00\x00\x00'
        b'\xbf'
    )

    assert len(gltf.accessors) == 3
    accessor_0 = gltf.accessors[0]
    assert isinstance(accessor_0.data, U16Array)
    assert accessor_0.data == U16Array(
        0, 1, 2, 3, 2, 1, 4, 5, 6, 7, 6, 5, 8, 9, 10, 11, 10, 9, 12, 13, 14,
        15, 14, 13, 16, 17, 18, 19, 18, 17, 20, 21, 22, 23, 22, 21,
    )

    accessor_1 = gltf.accessors[1]
    assert isinstance(accessor_1.data, FVector3Array)
    assert accessor_1.data == FVector3Array(
        FVector3(0.0, 0.0, 1.0), FVector3(0.0, 0.0, 1.0),
        FVector3(0.0, 0.0, 1.0), FVector3(0.0, 0.0, 1.0),
        FVector3(0.0, -1.0, 0.0), FVector3(0.0, -1.0, 0.0),
        FVector3(0.0, -1.0, 0.0), FVector3(0.0, -1.0, 0.0),
        FVector3(1.0, 0.0, 0.0), FVector3(1.0, 0.0, 0.0),
        FVector3(1.0, 0.0, 0.0), FVector3(1.0, 0.0, 0.0),
        FVector3(0.0, 1.0, 0.0), FVector3(0.0, 1.0, 0.0),
        FVector3(0.0, 1.0, 0.0), FVector3(0.0, 1.0, 0.0),
        FVector3(-1.0, 0.0, 0.0), FVector3(-1.0, 0.0, 0.0),
        FVector3(-1.0, 0.0, 0.0), FVector3(-1.0, 0.0, 0.0),
        FVector3(0.0, 0.0, -1.0), FVector3(0.0, 0.0, -1.0),
        FVector3(0.0, 0.0, -1.0), FVector3(0.0, 0.0, -1.0),
    )

    accessor_2 = gltf.accessors[2]
    assert isinstance(accessor_2.data, FVector3Array)
    assert accessor_2.data == FVector3Array(
        FVector3(-0.5, -0.5, 0.5), FVector3(0.5, -0.5, 0.5),
        FVector3(-0.5, 0.5, 0.5), FVector3(0.5, 0.5, 0.5),
        FVector3(0.5, -0.5, 0.5), FVector3(-0.5, -0.5, 0.5),
        FVector3(0.5, -0.5, -0.5), FVector3(-0.5, -0.5, -0.5),
        FVector3(0.5, 0.5, 0.5), FVector3(0.5, -0.5, 0.5),
        FVector3(0.5, 0.5, -0.5), FVector3(0.5, -0.5, -0.5),
        FVector3(-0.5, 0.5, 0.5), FVector3(0.5, 0.5, 0.5),
        FVector3(-0.5, 0.5, -0.5), FVector3(0.5, 0.5, -0.5),
        FVector3(-0.5, -0.5, 0.5), FVector3(-0.5, 0.5, 0.5),
        FVector3(-0.5, -0.5, -0.5), FVector3(-0.5, 0.5, -0.5),
        FVector3(-0.5, -0.5, -0.5), FVector3(-0.5, 0.5, -0.5),
        FVector3(0.5, -0.5, -0.5), FVector3(0.5, 0.5, -0.5)
    )
