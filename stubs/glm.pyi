from numbers import Number
from typing import Any, overload, List, Literal, Generator, SupportsFloat, Tuple

class bvec1:

    x: bool

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec1) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dvec1) -> None: ...
    @overload
    def __init__(self, x: i8vec1) -> None: ...
    @overload
    def __init__(self, x: ivec1) -> None: ...
    @overload
    def __init__(self, x: u8vec1) -> None: ...
    @overload
    def __init__(self, x: uvec1) -> None: ...
    @overload
    def __init__(self, x: vec1) -> None: ...

    def __len__(self) -> Literal[1]: ...
    def __getitem__(self, index: int) -> bool: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[bool, None, None]: ...

    def __neg__(self) -> bvec1: ...
    def __pos__(self) -> bvec1: ...
    def __abs__(self) -> bvec1: ...

    def to_list(self) -> List[bool]: ...
    def to_tuple(self) -> Tuple[bool]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> bvec1: ...

    @overload
    def __add__(self, other: SupportsFloat) -> bvec1: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat]) -> bvec1: ...
    @overload
    def __add__(self, other: bvec1) -> bvec1: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> bvec1: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat]) -> bvec1: ...
    @overload
    def __iadd__(self, other: bvec1) -> bvec1: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> bvec1: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat]) -> bvec1: ...
    @overload
    def __mul__(self, other: bvec1) -> bvec1: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> bvec1: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat]) -> bvec1: ...
    @overload
    def __imul__(self, other: bvec1) -> bvec1: ...


class bvec2:

    x: bool
    y: bool

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> bool: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[bool, None, None]: ...

    def __neg__(self) -> bvec2: ...
    def __pos__(self) -> bvec2: ...
    def __abs__(self) -> bvec2: ...

    def to_list(self) -> List[bool]: ...
    def to_tuple(self) -> Tuple[bool, bool]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> bvec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> bvec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> bvec2: ...
    @overload
    def __add__(self, other: bvec2) -> bvec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> bvec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> bvec2: ...
    @overload
    def __iadd__(self, other: bvec2) -> bvec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> bvec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> bvec2: ...
    @overload
    def __mul__(self, other: bvec2) -> bvec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> bvec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> bvec2: ...
    @overload
    def __imul__(self, other: bvec2) -> bvec2: ...


class bvec3:

    x: bool
    y: bool
    z: bool

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> bool: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[bool, None, None]: ...

    def __neg__(self) -> bvec3: ...
    def __pos__(self) -> bvec3: ...
    def __abs__(self) -> bvec3: ...

    def to_list(self) -> List[bool]: ...
    def to_tuple(self) -> Tuple[bool, bool, bool]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> bvec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> bvec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec3: ...
    @overload
    def __add__(self, other: bvec3) -> bvec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> bvec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec3: ...
    @overload
    def __iadd__(self, other: bvec3) -> bvec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> bvec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec3: ...
    @overload
    def __mul__(self, other: bvec3) -> bvec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> bvec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec3: ...
    @overload
    def __imul__(self, other: bvec3) -> bvec3: ...


class bvec4:

    x: bool
    y: bool
    z: bool
    w: bool

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> bool: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[bool, None, None]: ...

    def __neg__(self) -> bvec4: ...
    def __pos__(self) -> bvec4: ...
    def __abs__(self) -> bvec4: ...

    def to_list(self) -> List[bool]: ...
    def to_tuple(self) -> Tuple[bool, bool, bool, bool]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> bvec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> bvec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec4: ...
    @overload
    def __add__(self, other: bvec4) -> bvec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> bvec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec4: ...
    @overload
    def __iadd__(self, other: bvec4) -> bvec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> bvec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec4: ...
    @overload
    def __mul__(self, other: bvec4) -> bvec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> bvec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> bvec4: ...
    @overload
    def __imul__(self, other: bvec4) -> bvec4: ...


class dmat2x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> dmvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec2, dmvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec2, None, None]: ...

    def __neg__(self) -> dmat2x2: ...
    def __pos__(self) -> dmat2x2: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float], Tuple[float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat2x2: ...


class dmat2x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> dmvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec3, dmvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec3, None, None]: ...

    def __neg__(self) -> dmat2x3: ...
    def __pos__(self) -> dmat2x3: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float], Tuple[float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat2x3: ...


class dmat2x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> dmvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec4, dmvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec4, None, None]: ...

    def __neg__(self) -> dmat2x4: ...
    def __pos__(self) -> dmat2x4: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float, float], Tuple[float, float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat2x4: ...


class dmat3x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> dmvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec2, dmvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec2, None, None]: ...

    def __neg__(self) -> dmat3x2: ...
    def __pos__(self) -> dmat3x2: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat3x2: ...


class dmat3x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> dmvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec3, dmvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec3, None, None]: ...

    def __neg__(self) -> dmat3x3: ...
    def __pos__(self) -> dmat3x3: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat3x3: ...


class dmat3x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> dmvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec4, dmvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec4, None, None]: ...

    def __neg__(self) -> dmat3x4: ...
    def __pos__(self) -> dmat3x4: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float, float], Tuple[float, float, float, float], Tuple[float, float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat3x4: ...


class dmat4x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> dmvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec2, dmvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec2, None, None]: ...

    def __neg__(self) -> dmat4x2: ...
    def __pos__(self) -> dmat4x2: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float], Tuple[float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat4x2: ...


class dmat4x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> dmvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec3, dmvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec3, None, None]: ...

    def __neg__(self) -> dmat4x3: ...
    def __pos__(self) -> dmat4x3: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat4x3: ...


class dmat4x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, _12: SupportsFloat, _13: SupportsFloat, _14: SupportsFloat, _15: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> dmvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[dvec4, dmvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[dmvec4, None, None]: ...

    def __neg__(self) -> dmat4x4: ...
    def __pos__(self) -> dmat4x4: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float, float], Tuple[float, float, float, float], Tuple[float, float, float, float], Tuple[float, float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmat4x4: ...


class dmvec2:

    x: float
    y: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> dmvec2: ...
    def __pos__(self) -> dmvec2: ...
    def __abs__(self) -> dmvec2: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmvec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __add__(self, other: dvec2) -> dvec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __iadd__(self, other: dvec2) -> dmvec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __sub__(self, other: dvec2) -> dvec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __isub__(self, other: dvec2) -> dmvec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __mul__(self, other: dvec2) -> dvec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __imul__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __imul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __imul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __imul__(self, other: dvec2) -> dmvec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __mod__(self, other: dvec2) -> dvec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __imod__(self, other: dvec2) -> dmvec2: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __pow__(self, other: dvec2) -> dvec2: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __ipow__(self, other: dvec2) -> dmvec2: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __floordiv__(self, other: dvec2) -> dvec2: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __ifloordiv__(self, other: dvec2) -> dmvec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __truediv__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __truediv__(self, other: dvec2) -> dvec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __itruediv__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __itruediv__(self, other: dvec2) -> dmvec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __matmul__(self, other: dvec2) -> dvec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> dmvec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dmvec2: ...
    @overload
    def __imatmul__(self, other: dmat2x2) -> dmvec2: ...
    @overload
    def __imatmul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __imatmul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __imatmul__(self, other: dvec2) -> dmvec2: ...

    def __divmod__(self, other: dvec2) -> Tuple[dvec2, dvec2]: ...


class dmvec3:

    x: float
    y: float
    z: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> dmvec3: ...
    def __pos__(self) -> dmvec3: ...
    def __abs__(self) -> dmvec3: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmvec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __add__(self, other: dvec3) -> dvec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __iadd__(self, other: dvec3) -> dmvec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __sub__(self, other: dvec3) -> dvec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __isub__(self, other: dvec3) -> dmvec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __mul__(self, other: dvec3) -> dvec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __imul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __imul__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __imul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __imul__(self, other: dvec3) -> dmvec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __mod__(self, other: dvec3) -> dvec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __imod__(self, other: dvec3) -> dmvec3: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __pow__(self, other: dvec3) -> dvec3: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __ipow__(self, other: dvec3) -> dmvec3: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __floordiv__(self, other: dvec3) -> dvec3: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __ifloordiv__(self, other: dvec3) -> dmvec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __truediv__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __truediv__(self, other: dvec3) -> dvec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __itruediv__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __itruediv__(self, other: dvec3) -> dmvec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __matmul__(self, other: dvec3) -> dvec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> dmvec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec3: ...
    @overload
    def __imatmul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __imatmul__(self, other: dmat3x3) -> dmvec3: ...
    @overload
    def __imatmul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __imatmul__(self, other: dvec3) -> dmvec3: ...

    def __divmod__(self, other: dvec3) -> Tuple[dvec3, dvec3]: ...


class dmvec4:

    x: float
    y: float
    z: float
    w: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> dmvec4: ...
    def __pos__(self) -> dmvec4: ...
    def __abs__(self) -> dmvec4: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dmvec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __add__(self, other: dvec4) -> dvec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __iadd__(self, other: dvec4) -> dmvec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __sub__(self, other: dvec4) -> dvec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __isub__(self, other: dvec4) -> dmvec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __mul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __mul__(self, other: dvec4) -> dvec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __imul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __imul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __imul__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __imul__(self, other: dvec4) -> dmvec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __mod__(self, other: dvec4) -> dvec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __imod__(self, other: dvec4) -> dmvec4: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __pow__(self, other: dvec4) -> dvec4: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __ipow__(self, other: dvec4) -> dmvec4: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __floordiv__(self, other: dvec4) -> dvec4: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __ifloordiv__(self, other: dvec4) -> dmvec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __truediv__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __truediv__(self, other: dvec4) -> dvec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __itruediv__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __itruediv__(self, other: dvec4) -> dmvec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __matmul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __matmul__(self, other: dvec4) -> dvec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> dmvec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dmvec4: ...
    @overload
    def __imatmul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __imatmul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __imatmul__(self, other: dmat4x4) -> dmvec4: ...
    @overload
    def __imatmul__(self, other: dvec4) -> dmvec4: ...

    def __divmod__(self, other: dvec4) -> Tuple[dvec4, dvec4]: ...


class dvec1:

    x: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec1) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec1) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec1) -> None: ...
    @overload
    def __init__(self, x: ivec1) -> None: ...
    @overload
    def __init__(self, x: u8vec1) -> None: ...
    @overload
    def __init__(self, x: uvec1) -> None: ...
    @overload
    def __init__(self, x: vec1) -> None: ...

    def __len__(self) -> Literal[1]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> dvec1: ...
    def __pos__(self) -> dvec1: ...
    def __abs__(self) -> dvec1: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dvec1: ...

    @overload
    def __add__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __add__(self, other: dvec1) -> dvec1: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __iadd__(self, other: dvec1) -> dvec1: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __sub__(self, other: dvec1) -> dvec1: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __isub__(self, other: dvec1) -> dvec1: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __mul__(self, other: dvec1) -> dvec1: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __imul__(self, other: dvec1) -> dvec1: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __mod__(self, other: dvec1) -> dvec1: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __imod__(self, other: dvec1) -> dvec1: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __pow__(self, other: dvec1) -> dvec1: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __ipow__(self, other: dvec1) -> dvec1: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __floordiv__(self, other: dvec1) -> dvec1: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __ifloordiv__(self, other: dvec1) -> dvec1: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __truediv__(self, other: dvec1) -> dvec1: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __itruediv__(self, other: dvec1) -> dvec1: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __matmul__(self, other: dvec1) -> dvec1: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> dvec1: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat]) -> dvec1: ...
    @overload
    def __imatmul__(self, other: dvec1) -> dvec1: ...

    def __divmod__(self, other: dvec1) -> Tuple[dvec1, dvec1]: ...


class dvec2:

    x: float
    y: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> dvec2: ...
    def __pos__(self) -> dvec2: ...
    def __abs__(self) -> dvec2: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dvec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __add__(self, other: dvec2) -> dvec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __iadd__(self, other: dvec2) -> dvec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __sub__(self, other: dvec2) -> dvec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __isub__(self, other: dvec2) -> dvec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __mul__(self, other: dvec2) -> dvec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __imul__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __imul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __imul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __imul__(self, other: dvec2) -> dvec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __mod__(self, other: dvec2) -> dvec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __imod__(self, other: dvec2) -> dvec2: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __pow__(self, other: dvec2) -> dvec2: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __ipow__(self, other: dvec2) -> dvec2: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __floordiv__(self, other: dvec2) -> dvec2: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __ifloordiv__(self, other: dvec2) -> dvec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __truediv__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __truediv__(self, other: dvec2) -> dvec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __itruediv__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __itruediv__(self, other: dvec2) -> dvec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __matmul__(self, other: dvec2) -> dvec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> dvec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> dvec2: ...
    @overload
    def __imatmul__(self, other: dmat2x2) -> dvec2: ...
    @overload
    def __imatmul__(self, other: dmat3x2) -> dvec3: ...
    @overload
    def __imatmul__(self, other: dmat4x2) -> dvec4: ...
    @overload
    def __imatmul__(self, other: dvec2) -> dvec2: ...

    def __divmod__(self, other: dvec2) -> Tuple[dvec2, dvec2]: ...


class dvec3:

    x: float
    y: float
    z: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> dvec3: ...
    def __pos__(self) -> dvec3: ...
    def __abs__(self) -> dvec3: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dvec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __add__(self, other: dvec3) -> dvec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __iadd__(self, other: dvec3) -> dvec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __sub__(self, other: dvec3) -> dvec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __isub__(self, other: dvec3) -> dvec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __mul__(self, other: dvec3) -> dvec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __imul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __imul__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __imul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __imul__(self, other: dvec3) -> dvec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __mod__(self, other: dvec3) -> dvec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __imod__(self, other: dvec3) -> dvec3: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __pow__(self, other: dvec3) -> dvec3: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __ipow__(self, other: dvec3) -> dvec3: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __floordiv__(self, other: dvec3) -> dvec3: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __ifloordiv__(self, other: dvec3) -> dvec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __truediv__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __truediv__(self, other: dvec3) -> dvec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __itruediv__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __itruediv__(self, other: dvec3) -> dvec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __matmul__(self, other: dvec3) -> dvec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> dvec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec3: ...
    @overload
    def __imatmul__(self, other: dmat2x3) -> dvec2: ...
    @overload
    def __imatmul__(self, other: dmat3x3) -> dvec3: ...
    @overload
    def __imatmul__(self, other: dmat4x3) -> dvec4: ...
    @overload
    def __imatmul__(self, other: dvec3) -> dvec3: ...

    def __divmod__(self, other: dvec3) -> Tuple[dvec3, dvec3]: ...


class dvec4:

    x: float
    y: float
    z: float
    w: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> dvec4: ...
    def __pos__(self) -> dvec4: ...
    def __abs__(self) -> dvec4: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> dvec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __add__(self, other: dvec4) -> dvec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __iadd__(self, other: dvec4) -> dvec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __sub__(self, other: dvec4) -> dvec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __isub__(self, other: dvec4) -> dvec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __mul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __mul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __mul__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __mul__(self, other: dvec4) -> dvec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __imul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __imul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __imul__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __imul__(self, other: dvec4) -> dvec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __mod__(self, other: dvec4) -> dvec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __imod__(self, other: dvec4) -> dvec4: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __pow__(self, other: dvec4) -> dvec4: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __ipow__(self, other: dvec4) -> dvec4: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __floordiv__(self, other: dvec4) -> dvec4: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __ifloordiv__(self, other: dvec4) -> dvec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __truediv__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __truediv__(self, other: dvec4) -> dvec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __itruediv__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __itruediv__(self, other: dvec4) -> dvec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __matmul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __matmul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __matmul__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __matmul__(self, other: dvec4) -> dvec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> dvec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> dvec4: ...
    @overload
    def __imatmul__(self, other: dmat2x4) -> dvec2: ...
    @overload
    def __imatmul__(self, other: dmat3x4) -> dvec3: ...
    @overload
    def __imatmul__(self, other: dmat4x4) -> dvec4: ...
    @overload
    def __imatmul__(self, other: dvec4) -> dvec4: ...

    def __divmod__(self, other: dvec4) -> Tuple[dvec4, dvec4]: ...


class i8vec1:

    x: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec1) -> None: ...
    @overload
    def __init__(self, x: dvec1) -> None: ...
    @overload
    def __init__(self, x: i8vec1) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: ivec1) -> None: ...
    @overload
    def __init__(self, x: u8vec1) -> None: ...
    @overload
    def __init__(self, x: uvec1) -> None: ...
    @overload
    def __init__(self, x: vec1) -> None: ...

    def __len__(self) -> Literal[1]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> i8vec1: ...
    def __pos__(self) -> i8vec1: ...
    def __abs__(self) -> i8vec1: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> i8vec1: ...

    @overload
    def __add__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __add__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __iadd__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __sub__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __isub__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __mul__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __imul__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __mod__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __imod__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __truediv__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __itruediv__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __matmul__(self, other: i8vec1) -> i8vec1: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> i8vec1: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat]) -> i8vec1: ...
    @overload
    def __imatmul__(self, other: i8vec1) -> i8vec1: ...


class i8vec2:

    x: int
    y: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> i8vec2: ...
    def __pos__(self) -> i8vec2: ...
    def __abs__(self) -> i8vec2: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> i8vec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __add__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __iadd__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __sub__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __isub__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __mul__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __imul__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __mod__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __imod__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __truediv__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __itruediv__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __matmul__(self, other: i8vec2) -> i8vec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> i8vec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> i8vec2: ...
    @overload
    def __imatmul__(self, other: i8vec2) -> i8vec2: ...


class i8vec3:

    x: int
    y: int
    z: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> i8vec3: ...
    def __pos__(self) -> i8vec3: ...
    def __abs__(self) -> i8vec3: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> i8vec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __add__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __iadd__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __sub__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __isub__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __mul__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __imul__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __mod__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __imod__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __truediv__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __itruediv__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __matmul__(self, other: i8vec3) -> i8vec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> i8vec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec3: ...
    @overload
    def __imatmul__(self, other: i8vec3) -> i8vec3: ...


class i8vec4:

    x: int
    y: int
    z: int
    w: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> i8vec4: ...
    def __pos__(self) -> i8vec4: ...
    def __abs__(self) -> i8vec4: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> i8vec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __add__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __iadd__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __sub__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __isub__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __mul__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __imul__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __mod__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __imod__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __truediv__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __itruediv__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __matmul__(self, other: i8vec4) -> i8vec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> i8vec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> i8vec4: ...
    @overload
    def __imatmul__(self, other: i8vec4) -> i8vec4: ...


class imat2x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> imvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec2, imvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec2, None, None]: ...

    def __neg__(self) -> imat2x2: ...
    def __pos__(self) -> imat2x2: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int], Tuple[int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat2x2: ...


class imat2x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> imvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec3, imvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec3, None, None]: ...

    def __neg__(self) -> imat2x3: ...
    def __pos__(self) -> imat2x3: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat2x3: ...


class imat2x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> imvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec4, imvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec4, None, None]: ...

    def __neg__(self) -> imat2x4: ...
    def __pos__(self) -> imat2x4: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int, int], Tuple[int, int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat2x4: ...


class imat3x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> imvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec2, imvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec2, None, None]: ...

    def __neg__(self) -> imat3x2: ...
    def __pos__(self) -> imat3x2: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat3x2: ...


class imat3x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> imvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec3, imvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec3, None, None]: ...

    def __neg__(self) -> imat3x3: ...
    def __pos__(self) -> imat3x3: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat3x3: ...


class imat3x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> imvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec4, imvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec4, None, None]: ...

    def __neg__(self) -> imat3x4: ...
    def __pos__(self) -> imat3x4: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int, int], Tuple[int, int, int, int], Tuple[int, int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat3x4: ...


class imat4x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> imvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec2, imvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec2, None, None]: ...

    def __neg__(self) -> imat4x2: ...
    def __pos__(self) -> imat4x2: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat4x2: ...


class imat4x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> imvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec3, imvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec3, None, None]: ...

    def __neg__(self) -> imat4x3: ...
    def __pos__(self) -> imat4x3: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat4x3: ...


class imat4x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, _12: SupportsFloat, _13: SupportsFloat, _14: SupportsFloat, _15: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> imvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[ivec4, imvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[imvec4, None, None]: ...

    def __neg__(self) -> imat4x4: ...
    def __pos__(self) -> imat4x4: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int, int], Tuple[int, int, int, int], Tuple[int, int, int, int], Tuple[int, int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imat4x4: ...


class imvec2:

    x: int
    y: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> imvec2: ...
    def __pos__(self) -> imvec2: ...
    def __abs__(self) -> imvec2: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imvec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __add__(self, other: ivec2) -> ivec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> imvec2: ...
    @overload
    def __iadd__(self, other: ivec2) -> imvec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __sub__(self, other: ivec2) -> ivec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> imvec2: ...
    @overload
    def __isub__(self, other: ivec2) -> imvec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __mul__(self, other: imat2x2) -> ivec2: ...
    @overload
    def __mul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __mul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __mul__(self, other: ivec2) -> ivec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> imvec2: ...
    @overload
    def __imul__(self, other: imat2x2) -> ivec2: ...
    @overload
    def __imul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __imul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __imul__(self, other: ivec2) -> imvec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __mod__(self, other: ivec2) -> ivec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __imod__(self, other: ivec2) -> ivec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __truediv__(self, other: ivec2) -> ivec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> imvec2: ...
    @overload
    def __itruediv__(self, other: ivec2) -> imvec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat2x2) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __matmul__(self, other: ivec2) -> ivec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> imvec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> imvec2: ...
    @overload
    def __imatmul__(self, other: imat2x2) -> imvec2: ...
    @overload
    def __imatmul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __imatmul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __imatmul__(self, other: ivec2) -> imvec2: ...


class imvec3:

    x: int
    y: int
    z: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> imvec3: ...
    def __pos__(self) -> imvec3: ...
    def __abs__(self) -> imvec3: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imvec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __add__(self, other: ivec3) -> ivec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec3: ...
    @overload
    def __iadd__(self, other: ivec3) -> imvec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __sub__(self, other: ivec3) -> ivec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec3: ...
    @overload
    def __isub__(self, other: ivec3) -> imvec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __mul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __mul__(self, other: imat3x3) -> ivec3: ...
    @overload
    def __mul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __mul__(self, other: ivec3) -> ivec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec3: ...
    @overload
    def __imul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __imul__(self, other: imat3x3) -> ivec3: ...
    @overload
    def __imul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __imul__(self, other: ivec3) -> imvec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __mod__(self, other: ivec3) -> ivec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __imod__(self, other: ivec3) -> ivec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __truediv__(self, other: ivec3) -> ivec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec3: ...
    @overload
    def __itruediv__(self, other: ivec3) -> imvec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat3x3) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __matmul__(self, other: ivec3) -> ivec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> imvec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec3: ...
    @overload
    def __imatmul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __imatmul__(self, other: imat3x3) -> imvec3: ...
    @overload
    def __imatmul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __imatmul__(self, other: ivec3) -> imvec3: ...


class imvec4:

    x: int
    y: int
    z: int
    w: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> imvec4: ...
    def __pos__(self) -> imvec4: ...
    def __abs__(self) -> imvec4: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> imvec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __add__(self, other: ivec4) -> ivec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec4: ...
    @overload
    def __iadd__(self, other: ivec4) -> imvec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __sub__(self, other: ivec4) -> ivec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec4: ...
    @overload
    def __isub__(self, other: ivec4) -> imvec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __mul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __mul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __mul__(self, other: imat4x4) -> ivec4: ...
    @overload
    def __mul__(self, other: ivec4) -> ivec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec4: ...
    @overload
    def __imul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __imul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __imul__(self, other: imat4x4) -> ivec4: ...
    @overload
    def __imul__(self, other: ivec4) -> imvec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __mod__(self, other: ivec4) -> ivec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __imod__(self, other: ivec4) -> ivec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __truediv__(self, other: ivec4) -> ivec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec4: ...
    @overload
    def __itruediv__(self, other: ivec4) -> imvec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __matmul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat4x4) -> ivec4: ...
    @overload
    def __matmul__(self, other: ivec4) -> ivec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> imvec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> imvec4: ...
    @overload
    def __imatmul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __imatmul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __imatmul__(self, other: imat4x4) -> imvec4: ...
    @overload
    def __imatmul__(self, other: ivec4) -> imvec4: ...


class ivec1:

    x: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec1) -> None: ...
    @overload
    def __init__(self, x: dvec1) -> None: ...
    @overload
    def __init__(self, x: i8vec1) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec1) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: u8vec1) -> None: ...
    @overload
    def __init__(self, x: uvec1) -> None: ...
    @overload
    def __init__(self, x: vec1) -> None: ...

    def __len__(self) -> Literal[1]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> ivec1: ...
    def __pos__(self) -> ivec1: ...
    def __abs__(self) -> ivec1: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> ivec1: ...

    @overload
    def __add__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __add__(self, other: ivec1) -> ivec1: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __iadd__(self, other: ivec1) -> ivec1: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __sub__(self, other: ivec1) -> ivec1: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __isub__(self, other: ivec1) -> ivec1: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __mul__(self, other: ivec1) -> ivec1: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __imul__(self, other: ivec1) -> ivec1: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __mod__(self, other: ivec1) -> ivec1: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __imod__(self, other: ivec1) -> ivec1: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __truediv__(self, other: ivec1) -> ivec1: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __itruediv__(self, other: ivec1) -> ivec1: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __matmul__(self, other: ivec1) -> ivec1: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> ivec1: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat]) -> ivec1: ...
    @overload
    def __imatmul__(self, other: ivec1) -> ivec1: ...


class ivec2:

    x: int
    y: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> ivec2: ...
    def __pos__(self) -> ivec2: ...
    def __abs__(self) -> ivec2: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> ivec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __add__(self, other: ivec2) -> ivec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __iadd__(self, other: ivec2) -> ivec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __sub__(self, other: ivec2) -> ivec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __isub__(self, other: ivec2) -> ivec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __mul__(self, other: imat2x2) -> ivec2: ...
    @overload
    def __mul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __mul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __mul__(self, other: ivec2) -> ivec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __imul__(self, other: imat2x2) -> ivec2: ...
    @overload
    def __imul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __imul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __imul__(self, other: ivec2) -> ivec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __mod__(self, other: ivec2) -> ivec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __imod__(self, other: ivec2) -> ivec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __truediv__(self, other: ivec2) -> ivec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __itruediv__(self, other: ivec2) -> ivec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat2x2) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __matmul__(self, other: ivec2) -> ivec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> ivec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> ivec2: ...
    @overload
    def __imatmul__(self, other: imat2x2) -> ivec2: ...
    @overload
    def __imatmul__(self, other: imat3x2) -> ivec3: ...
    @overload
    def __imatmul__(self, other: imat4x2) -> ivec4: ...
    @overload
    def __imatmul__(self, other: ivec2) -> ivec2: ...


class ivec3:

    x: int
    y: int
    z: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> ivec3: ...
    def __pos__(self) -> ivec3: ...
    def __abs__(self) -> ivec3: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> ivec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __add__(self, other: ivec3) -> ivec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __iadd__(self, other: ivec3) -> ivec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __sub__(self, other: ivec3) -> ivec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __isub__(self, other: ivec3) -> ivec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __mul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __mul__(self, other: imat3x3) -> ivec3: ...
    @overload
    def __mul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __mul__(self, other: ivec3) -> ivec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __imul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __imul__(self, other: imat3x3) -> ivec3: ...
    @overload
    def __imul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __imul__(self, other: ivec3) -> ivec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __mod__(self, other: ivec3) -> ivec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __imod__(self, other: ivec3) -> ivec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __truediv__(self, other: ivec3) -> ivec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __itruediv__(self, other: ivec3) -> ivec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat3x3) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __matmul__(self, other: ivec3) -> ivec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> ivec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec3: ...
    @overload
    def __imatmul__(self, other: imat2x3) -> ivec2: ...
    @overload
    def __imatmul__(self, other: imat3x3) -> ivec3: ...
    @overload
    def __imatmul__(self, other: imat4x3) -> ivec4: ...
    @overload
    def __imatmul__(self, other: ivec3) -> ivec3: ...


class ivec4:

    x: int
    y: int
    z: int
    w: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> ivec4: ...
    def __pos__(self) -> ivec4: ...
    def __abs__(self) -> ivec4: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> ivec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __add__(self, other: ivec4) -> ivec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __iadd__(self, other: ivec4) -> ivec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __sub__(self, other: ivec4) -> ivec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __isub__(self, other: ivec4) -> ivec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __mul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __mul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __mul__(self, other: imat4x4) -> ivec4: ...
    @overload
    def __mul__(self, other: ivec4) -> ivec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __imul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __imul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __imul__(self, other: imat4x4) -> ivec4: ...
    @overload
    def __imul__(self, other: ivec4) -> ivec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __mod__(self, other: ivec4) -> ivec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __imod__(self, other: ivec4) -> ivec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __truediv__(self, other: ivec4) -> ivec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __itruediv__(self, other: ivec4) -> ivec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __matmul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __matmul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __matmul__(self, other: imat4x4) -> ivec4: ...
    @overload
    def __matmul__(self, other: ivec4) -> ivec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> ivec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> ivec4: ...
    @overload
    def __imatmul__(self, other: imat2x4) -> ivec2: ...
    @overload
    def __imatmul__(self, other: imat3x4) -> ivec3: ...
    @overload
    def __imatmul__(self, other: imat4x4) -> ivec4: ...
    @overload
    def __imatmul__(self, other: ivec4) -> ivec4: ...


class mat2x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> Nonemvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec2, Nonemvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec2, None, None]: ...

    def __neg__(self) -> mat2x2: ...
    def __pos__(self) -> mat2x2: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float], Tuple[float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat2x2: ...


class mat2x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> Nonemvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec3, Nonemvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec3, None, None]: ...

    def __neg__(self) -> mat2x3: ...
    def __pos__(self) -> mat2x3: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float], Tuple[float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat2x3: ...


class mat2x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> Nonemvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec4, Nonemvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec4, None, None]: ...

    def __neg__(self) -> mat2x4: ...
    def __pos__(self) -> mat2x4: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float, float], Tuple[float, float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat2x4: ...


class mat3x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> Nonemvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec2, Nonemvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec2, None, None]: ...

    def __neg__(self) -> mat3x2: ...
    def __pos__(self) -> mat3x2: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat3x2: ...


class mat3x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> Nonemvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec3, Nonemvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec3, None, None]: ...

    def __neg__(self) -> mat3x3: ...
    def __pos__(self) -> mat3x3: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat3x3: ...


class mat3x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> Nonemvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec4, Nonemvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec4, None, None]: ...

    def __neg__(self) -> mat3x4: ...
    def __pos__(self) -> mat3x4: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float, float], Tuple[float, float, float, float], Tuple[float, float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat3x4: ...


class mat4x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> Nonemvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec2, Nonemvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec2, None, None]: ...

    def __neg__(self) -> mat4x2: ...
    def __pos__(self) -> mat4x2: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float], Tuple[float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat4x2: ...


class mat4x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> Nonemvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec3, Nonemvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec3, None, None]: ...

    def __neg__(self) -> mat4x3: ...
    def __pos__(self) -> mat4x3: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat4x3: ...


class mat4x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, _12: SupportsFloat, _13: SupportsFloat, _14: SupportsFloat, _15: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> Nonemvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[Nonevec4, Nonemvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[Nonemvec4, None, None]: ...

    def __neg__(self) -> mat4x4: ...
    def __pos__(self) -> mat4x4: ...

    def to_list(self) -> List[List[float]]: ...
    def to_tuple(self) -> Tuple[Tuple[float, float, float, float], Tuple[float, float, float, float], Tuple[float, float, float, float], Tuple[float, float, float, float]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mat4x4: ...


class mvec2:

    x: float
    y: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> mvec2: ...
    def __pos__(self) -> mvec2: ...
    def __abs__(self) -> mvec2: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mvec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __add__(self, other: vec2) -> vec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __iadd__(self, other: vec2) -> mvec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __sub__(self, other: vec2) -> vec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __isub__(self, other: vec2) -> mvec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __mul__(self, other: mat2x2) -> vec2: ...
    @overload
    def __mul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __mul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __mul__(self, other: vec2) -> vec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __imul__(self, other: mat2x2) -> vec2: ...
    @overload
    def __imul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __imul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __imul__(self, other: vec2) -> mvec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __mod__(self, other: vec2) -> vec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __imod__(self, other: vec2) -> mvec2: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __pow__(self, other: vec2) -> vec2: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __ipow__(self, other: vec2) -> mvec2: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __floordiv__(self, other: vec2) -> vec2: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __ifloordiv__(self, other: vec2) -> mvec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __truediv__(self, other: mat2x2) -> vec2: ...
    @overload
    def __truediv__(self, other: vec2) -> vec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __itruediv__(self, other: mat2x2) -> vec2: ...
    @overload
    def __itruediv__(self, other: vec2) -> mvec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __matmul__(self, other: mat2x2) -> vec2: ...
    @overload
    def __matmul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __matmul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __matmul__(self, other: vec2) -> vec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> mvec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> mvec2: ...
    @overload
    def __imatmul__(self, other: mat2x2) -> mvec2: ...
    @overload
    def __imatmul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __imatmul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __imatmul__(self, other: vec2) -> mvec2: ...

    def __divmod__(self, other: vec2) -> Tuple[vec2, vec2]: ...


class mvec3:

    x: float
    y: float
    z: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> mvec3: ...
    def __pos__(self) -> mvec3: ...
    def __abs__(self) -> mvec3: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mvec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __add__(self, other: vec3) -> vec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __iadd__(self, other: vec3) -> mvec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __sub__(self, other: vec3) -> vec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __isub__(self, other: vec3) -> mvec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __mul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __mul__(self, other: mat3x3) -> vec3: ...
    @overload
    def __mul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __mul__(self, other: vec3) -> vec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __imul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __imul__(self, other: mat3x3) -> vec3: ...
    @overload
    def __imul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __imul__(self, other: vec3) -> mvec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __mod__(self, other: vec3) -> vec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __imod__(self, other: vec3) -> mvec3: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __pow__(self, other: vec3) -> vec3: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __ipow__(self, other: vec3) -> mvec3: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __floordiv__(self, other: vec3) -> vec3: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __ifloordiv__(self, other: vec3) -> mvec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __truediv__(self, other: mat3x3) -> vec3: ...
    @overload
    def __truediv__(self, other: vec3) -> vec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __itruediv__(self, other: mat3x3) -> vec3: ...
    @overload
    def __itruediv__(self, other: vec3) -> mvec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __matmul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __matmul__(self, other: mat3x3) -> vec3: ...
    @overload
    def __matmul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __matmul__(self, other: vec3) -> vec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> mvec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec3: ...
    @overload
    def __imatmul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __imatmul__(self, other: mat3x3) -> mvec3: ...
    @overload
    def __imatmul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __imatmul__(self, other: vec3) -> mvec3: ...

    def __divmod__(self, other: vec3) -> Tuple[vec3, vec3]: ...


class mvec4:

    x: float
    y: float
    z: float
    w: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> mvec4: ...
    def __pos__(self) -> mvec4: ...
    def __abs__(self) -> mvec4: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> mvec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __add__(self, other: vec4) -> vec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __iadd__(self, other: vec4) -> mvec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __sub__(self, other: vec4) -> vec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __isub__(self, other: vec4) -> mvec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __mul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __mul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __mul__(self, other: mat4x4) -> vec4: ...
    @overload
    def __mul__(self, other: vec4) -> vec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __imul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __imul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __imul__(self, other: mat4x4) -> vec4: ...
    @overload
    def __imul__(self, other: vec4) -> mvec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __mod__(self, other: vec4) -> vec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __imod__(self, other: vec4) -> mvec4: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __pow__(self, other: vec4) -> vec4: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __ipow__(self, other: vec4) -> mvec4: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __floordiv__(self, other: vec4) -> vec4: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __ifloordiv__(self, other: vec4) -> mvec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __truediv__(self, other: mat4x4) -> vec4: ...
    @overload
    def __truediv__(self, other: vec4) -> vec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __itruediv__(self, other: mat4x4) -> vec4: ...
    @overload
    def __itruediv__(self, other: vec4) -> mvec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __matmul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __matmul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __matmul__(self, other: mat4x4) -> vec4: ...
    @overload
    def __matmul__(self, other: vec4) -> vec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> mvec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> mvec4: ...
    @overload
    def __imatmul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __imatmul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __imatmul__(self, other: mat4x4) -> mvec4: ...
    @overload
    def __imatmul__(self, other: vec4) -> mvec4: ...

    def __divmod__(self, other: vec4) -> Tuple[vec4, vec4]: ...


class u8vec1:

    x: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec1) -> None: ...
    @overload
    def __init__(self, x: dvec1) -> None: ...
    @overload
    def __init__(self, x: i8vec1) -> None: ...
    @overload
    def __init__(self, x: ivec1) -> None: ...
    @overload
    def __init__(self, x: u8vec1) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: uvec1) -> None: ...
    @overload
    def __init__(self, x: vec1) -> None: ...

    def __len__(self) -> Literal[1]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> u8vec1: ...
    def __pos__(self) -> u8vec1: ...
    def __abs__(self) -> u8vec1: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> u8vec1: ...

    @overload
    def __add__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __add__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __iadd__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __sub__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __isub__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __mul__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __imul__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __mod__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __imod__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __truediv__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __itruediv__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __matmul__(self, other: u8vec1) -> u8vec1: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> u8vec1: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat]) -> u8vec1: ...
    @overload
    def __imatmul__(self, other: u8vec1) -> u8vec1: ...


class u8vec2:

    x: int
    y: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> u8vec2: ...
    def __pos__(self) -> u8vec2: ...
    def __abs__(self) -> u8vec2: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> u8vec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __add__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __iadd__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __sub__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __isub__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __mul__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __imul__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __mod__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __imod__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __truediv__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __itruediv__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __matmul__(self, other: u8vec2) -> u8vec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> u8vec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> u8vec2: ...
    @overload
    def __imatmul__(self, other: u8vec2) -> u8vec2: ...


class u8vec3:

    x: int
    y: int
    z: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> u8vec3: ...
    def __pos__(self) -> u8vec3: ...
    def __abs__(self) -> u8vec3: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> u8vec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __add__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __iadd__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __sub__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __isub__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __mul__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __imul__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __mod__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __imod__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __truediv__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __itruediv__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __matmul__(self, other: u8vec3) -> u8vec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> u8vec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec3: ...
    @overload
    def __imatmul__(self, other: u8vec3) -> u8vec3: ...


class u8vec4:

    x: int
    y: int
    z: int
    w: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> u8vec4: ...
    def __pos__(self) -> u8vec4: ...
    def __abs__(self) -> u8vec4: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> u8vec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __add__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __iadd__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __sub__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __isub__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __mul__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __imul__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __mod__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __imod__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __truediv__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __itruediv__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __matmul__(self, other: u8vec4) -> u8vec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> u8vec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> u8vec4: ...
    @overload
    def __imatmul__(self, other: u8vec4) -> u8vec4: ...


class umat2x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x2, /) -> None: ...
    @overload
    def __init__(self, _: imat2x2, /) -> None: ...
    @overload
    def __init__(self, _: mat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> umvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec2, umvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec2, None, None]: ...

    def __neg__(self) -> umat2x2: ...
    def __pos__(self) -> umat2x2: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int], Tuple[int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat2x2: ...


class umat2x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x3, /) -> None: ...
    @overload
    def __init__(self, _: imat2x3, /) -> None: ...
    @overload
    def __init__(self, _: mat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> umvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec3, umvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec3, None, None]: ...

    def __neg__(self) -> umat2x3: ...
    def __pos__(self) -> umat2x3: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat2x3: ...


class umat2x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat2x4, /) -> None: ...
    @overload
    def __init__(self, _: imat2x4, /) -> None: ...
    @overload
    def __init__(self, _: mat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[2]: ...
    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> umvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec4, umvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec4, None, None]: ...

    def __neg__(self) -> umat2x4: ...
    def __pos__(self) -> umat2x4: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int, int], Tuple[int, int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat2x4: ...


class umat3x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x2, /) -> None: ...
    @overload
    def __init__(self, _: imat3x2, /) -> None: ...
    @overload
    def __init__(self, _: mat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> umvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec2, umvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec2, None, None]: ...

    def __neg__(self) -> umat3x2: ...
    def __pos__(self) -> umat3x2: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat3x2: ...


class umat3x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x3, /) -> None: ...
    @overload
    def __init__(self, _: imat3x3, /) -> None: ...
    @overload
    def __init__(self, _: mat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> umvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec3, umvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec3, None, None]: ...

    def __neg__(self) -> umat3x3: ...
    def __pos__(self) -> umat3x3: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat3x3: ...


class umat3x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat3x4, /) -> None: ...
    @overload
    def __init__(self, _: imat3x4, /) -> None: ...
    @overload
    def __init__(self, _: mat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[3]: ...
    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> umvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec4, umvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec4, None, None]: ...

    def __neg__(self) -> umat3x4: ...
    def __pos__(self) -> umat3x4: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int, int], Tuple[int, int, int, int], Tuple[int, int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat3x4: ...


class umat4x2:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x2, /) -> None: ...
    @overload
    def __init__(self, _: imat4x2, /) -> None: ...
    @overload
    def __init__(self, _: mat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> umvec2: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec2, umvec2]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec2, None, None]: ...

    def __neg__(self) -> umat4x2: ...
    def __pos__(self) -> umat4x2: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat4x2: ...


class umat4x3:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x3, /) -> None: ...
    @overload
    def __init__(self, _: imat4x3, /) -> None: ...
    @overload
    def __init__(self, _: mat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> umvec3: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec3, umvec3]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec3, None, None]: ...

    def __neg__(self) -> umat4x3: ...
    def __pos__(self) -> umat4x3: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat4x3: ...


class umat4x4:

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _0: SupportsFloat, _1: SupportsFloat, _2: SupportsFloat, _3: SupportsFloat, _4: SupportsFloat, _5: SupportsFloat, _6: SupportsFloat, _7: SupportsFloat, _8: SupportsFloat, _9: SupportsFloat, _10: SupportsFloat, _11: SupportsFloat, _12: SupportsFloat, _13: SupportsFloat, _14: SupportsFloat, _15: SupportsFloat, /) -> None: ...
    @overload
    def __init__(self, _: Tuple[Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat], Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]], /) -> None: ...
    @overload
    def __init__(self, _: dmat4x4, /) -> None: ...
    @overload
    def __init__(self, _: imat4x4, /) -> None: ...
    @overload
    def __init__(self, _: mat4x4, /) -> None: ...
    @overload
    def __init__(self, _: umat2x2, /) -> None: ...
    @overload
    def __init__(self, _: umat2x3, /) -> None: ...
    @overload
    def __init__(self, _: umat2x4, /) -> None: ...
    @overload
    def __init__(self, _: umat3x2, /) -> None: ...
    @overload
    def __init__(self, _: umat3x3, /) -> None: ...
    @overload
    def __init__(self, _: umat3x4, /) -> None: ...
    @overload
    def __init__(self, _: umat4x2, /) -> None: ...
    @overload
    def __init__(self, _: umat4x3, /) -> None: ...
    @overload
    def __init__(self, _: umat4x4, /) -> None: ...

    def length(self) -> Literal[4]: ...
    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> umvec4: ...

    @overload
    def __setitem__(self, index: Tuple[int, int], value: SupportsFloat) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Union[uvec4, umvec4]) -> None: ...

    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[umvec4, None, None]: ...

    def __neg__(self) -> umat4x4: ...
    def __pos__(self) -> umat4x4: ...

    def to_list(self) -> List[List[int]]: ...
    def to_tuple(self) -> Tuple[Tuple[int, int, int, int], Tuple[int, int, int, int], Tuple[int, int, int, int], Tuple[int, int, int, int]]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umat4x4: ...


class umvec2:

    x: int
    y: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> umvec2: ...
    def __pos__(self) -> umvec2: ...
    def __abs__(self) -> umvec2: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umvec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __add__(self, other: uvec2) -> uvec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> umvec2: ...
    @overload
    def __iadd__(self, other: uvec2) -> umvec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __sub__(self, other: uvec2) -> uvec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> umvec2: ...
    @overload
    def __isub__(self, other: uvec2) -> umvec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __mul__(self, other: umat2x2) -> uvec2: ...
    @overload
    def __mul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __mul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __mul__(self, other: uvec2) -> uvec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> umvec2: ...
    @overload
    def __imul__(self, other: umat2x2) -> uvec2: ...
    @overload
    def __imul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __imul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __imul__(self, other: uvec2) -> umvec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __mod__(self, other: uvec2) -> uvec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __imod__(self, other: uvec2) -> uvec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __truediv__(self, other: uvec2) -> uvec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> umvec2: ...
    @overload
    def __itruediv__(self, other: uvec2) -> umvec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat2x2) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __matmul__(self, other: uvec2) -> uvec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> umvec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> umvec2: ...
    @overload
    def __imatmul__(self, other: umat2x2) -> umvec2: ...
    @overload
    def __imatmul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __imatmul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __imatmul__(self, other: uvec2) -> umvec2: ...


class umvec3:

    x: int
    y: int
    z: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> umvec3: ...
    def __pos__(self) -> umvec3: ...
    def __abs__(self) -> umvec3: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umvec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __add__(self, other: uvec3) -> uvec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec3: ...
    @overload
    def __iadd__(self, other: uvec3) -> umvec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __sub__(self, other: uvec3) -> uvec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec3: ...
    @overload
    def __isub__(self, other: uvec3) -> umvec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __mul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __mul__(self, other: umat3x3) -> uvec3: ...
    @overload
    def __mul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __mul__(self, other: uvec3) -> uvec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec3: ...
    @overload
    def __imul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __imul__(self, other: umat3x3) -> uvec3: ...
    @overload
    def __imul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __imul__(self, other: uvec3) -> umvec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __mod__(self, other: uvec3) -> uvec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __imod__(self, other: uvec3) -> uvec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __truediv__(self, other: uvec3) -> uvec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec3: ...
    @overload
    def __itruediv__(self, other: uvec3) -> umvec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat3x3) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __matmul__(self, other: uvec3) -> uvec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> umvec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec3: ...
    @overload
    def __imatmul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __imatmul__(self, other: umat3x3) -> umvec3: ...
    @overload
    def __imatmul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __imatmul__(self, other: uvec3) -> umvec3: ...


class umvec4:

    x: int
    y: int
    z: int
    w: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> umvec4: ...
    def __pos__(self) -> umvec4: ...
    def __abs__(self) -> umvec4: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> umvec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __add__(self, other: uvec4) -> uvec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec4: ...
    @overload
    def __iadd__(self, other: uvec4) -> umvec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __sub__(self, other: uvec4) -> uvec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec4: ...
    @overload
    def __isub__(self, other: uvec4) -> umvec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __mul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __mul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __mul__(self, other: umat4x4) -> uvec4: ...
    @overload
    def __mul__(self, other: uvec4) -> uvec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec4: ...
    @overload
    def __imul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __imul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __imul__(self, other: umat4x4) -> uvec4: ...
    @overload
    def __imul__(self, other: uvec4) -> umvec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __mod__(self, other: uvec4) -> uvec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __imod__(self, other: uvec4) -> uvec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __truediv__(self, other: uvec4) -> uvec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec4: ...
    @overload
    def __itruediv__(self, other: uvec4) -> umvec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __matmul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat4x4) -> uvec4: ...
    @overload
    def __matmul__(self, other: uvec4) -> uvec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> umvec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> umvec4: ...
    @overload
    def __imatmul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __imatmul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __imatmul__(self, other: umat4x4) -> umvec4: ...
    @overload
    def __imatmul__(self, other: uvec4) -> umvec4: ...


class uvec1:

    x: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec1) -> None: ...
    @overload
    def __init__(self, x: dvec1) -> None: ...
    @overload
    def __init__(self, x: i8vec1) -> None: ...
    @overload
    def __init__(self, x: ivec1) -> None: ...
    @overload
    def __init__(self, x: u8vec1) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec1) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec1) -> None: ...

    def __len__(self) -> Literal[1]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> uvec1: ...
    def __pos__(self) -> uvec1: ...
    def __abs__(self) -> uvec1: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> uvec1: ...

    @overload
    def __add__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __add__(self, other: uvec1) -> uvec1: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __iadd__(self, other: uvec1) -> uvec1: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __sub__(self, other: uvec1) -> uvec1: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __isub__(self, other: uvec1) -> uvec1: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __mul__(self, other: uvec1) -> uvec1: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __imul__(self, other: uvec1) -> uvec1: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __mod__(self, other: uvec1) -> uvec1: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __imod__(self, other: uvec1) -> uvec1: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __truediv__(self, other: uvec1) -> uvec1: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __itruediv__(self, other: uvec1) -> uvec1: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __matmul__(self, other: uvec1) -> uvec1: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> uvec1: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat]) -> uvec1: ...
    @overload
    def __imatmul__(self, other: uvec1) -> uvec1: ...


class uvec2:

    x: int
    y: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> uvec2: ...
    def __pos__(self) -> uvec2: ...
    def __abs__(self) -> uvec2: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> uvec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __add__(self, other: uvec2) -> uvec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __iadd__(self, other: uvec2) -> uvec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __sub__(self, other: uvec2) -> uvec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __isub__(self, other: uvec2) -> uvec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __mul__(self, other: umat2x2) -> uvec2: ...
    @overload
    def __mul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __mul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __mul__(self, other: uvec2) -> uvec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __imul__(self, other: umat2x2) -> uvec2: ...
    @overload
    def __imul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __imul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __imul__(self, other: uvec2) -> uvec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __mod__(self, other: uvec2) -> uvec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __imod__(self, other: uvec2) -> uvec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __truediv__(self, other: uvec2) -> uvec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __itruediv__(self, other: uvec2) -> uvec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat2x2) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __matmul__(self, other: uvec2) -> uvec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> uvec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> uvec2: ...
    @overload
    def __imatmul__(self, other: umat2x2) -> uvec2: ...
    @overload
    def __imatmul__(self, other: umat3x2) -> uvec3: ...
    @overload
    def __imatmul__(self, other: umat4x2) -> uvec4: ...
    @overload
    def __imatmul__(self, other: uvec2) -> uvec2: ...


class uvec3:

    x: int
    y: int
    z: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> uvec3: ...
    def __pos__(self) -> uvec3: ...
    def __abs__(self) -> uvec3: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> uvec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __add__(self, other: uvec3) -> uvec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __iadd__(self, other: uvec3) -> uvec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __sub__(self, other: uvec3) -> uvec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __isub__(self, other: uvec3) -> uvec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __mul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __mul__(self, other: umat3x3) -> uvec3: ...
    @overload
    def __mul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __mul__(self, other: uvec3) -> uvec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __imul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __imul__(self, other: umat3x3) -> uvec3: ...
    @overload
    def __imul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __imul__(self, other: uvec3) -> uvec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __mod__(self, other: uvec3) -> uvec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __imod__(self, other: uvec3) -> uvec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __truediv__(self, other: uvec3) -> uvec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __itruediv__(self, other: uvec3) -> uvec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat3x3) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __matmul__(self, other: uvec3) -> uvec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> uvec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec3: ...
    @overload
    def __imatmul__(self, other: umat2x3) -> uvec2: ...
    @overload
    def __imatmul__(self, other: umat3x3) -> uvec3: ...
    @overload
    def __imatmul__(self, other: umat4x3) -> uvec4: ...
    @overload
    def __imatmul__(self, other: uvec3) -> uvec3: ...


class uvec4:

    x: int
    y: int
    z: int
    w: int

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[int, None, None]: ...

    def __neg__(self) -> uvec4: ...
    def __pos__(self) -> uvec4: ...
    def __abs__(self) -> uvec4: ...

    def to_list(self) -> List[int]: ...
    def to_tuple(self) -> Tuple[int, int, int, int]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> uvec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __add__(self, other: uvec4) -> uvec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __iadd__(self, other: uvec4) -> uvec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __sub__(self, other: uvec4) -> uvec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __isub__(self, other: uvec4) -> uvec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __mul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __mul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __mul__(self, other: umat4x4) -> uvec4: ...
    @overload
    def __mul__(self, other: uvec4) -> uvec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __imul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __imul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __imul__(self, other: umat4x4) -> uvec4: ...
    @overload
    def __imul__(self, other: uvec4) -> uvec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __mod__(self, other: uvec4) -> uvec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __imod__(self, other: uvec4) -> uvec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __truediv__(self, other: uvec4) -> uvec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __itruediv__(self, other: uvec4) -> uvec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __matmul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __matmul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __matmul__(self, other: umat4x4) -> uvec4: ...
    @overload
    def __matmul__(self, other: uvec4) -> uvec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> uvec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> uvec4: ...
    @overload
    def __imatmul__(self, other: umat2x4) -> uvec2: ...
    @overload
    def __imatmul__(self, other: umat3x4) -> uvec3: ...
    @overload
    def __imatmul__(self, other: umat4x4) -> uvec4: ...
    @overload
    def __imatmul__(self, other: uvec4) -> uvec4: ...


class vec1:

    x: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec1) -> None: ...
    @overload
    def __init__(self, x: dvec1) -> None: ...
    @overload
    def __init__(self, x: i8vec1) -> None: ...
    @overload
    def __init__(self, x: ivec1) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec1) -> None: ...
    @overload
    def __init__(self, x: uvec1) -> None: ...
    @overload
    def __init__(self, x: vec1) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[1]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> vec1: ...
    def __pos__(self) -> vec1: ...
    def __abs__(self) -> vec1: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> vec1: ...

    @overload
    def __add__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __add__(self, other: vec1) -> vec1: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __iadd__(self, other: vec1) -> vec1: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __sub__(self, other: vec1) -> vec1: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __isub__(self, other: vec1) -> vec1: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __mul__(self, other: vec1) -> vec1: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __imul__(self, other: vec1) -> vec1: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __mod__(self, other: vec1) -> vec1: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __imod__(self, other: vec1) -> vec1: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __pow__(self, other: vec1) -> vec1: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __ipow__(self, other: vec1) -> vec1: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __floordiv__(self, other: vec1) -> vec1: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __ifloordiv__(self, other: vec1) -> vec1: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __truediv__(self, other: vec1) -> vec1: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __itruediv__(self, other: vec1) -> vec1: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __matmul__(self, other: vec1) -> vec1: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> vec1: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat]) -> vec1: ...
    @overload
    def __imatmul__(self, other: vec1) -> vec1: ...

    def __divmod__(self, other: vec1) -> Tuple[vec1, vec1]: ...


class vec2:

    x: float
    y: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec2) -> None: ...
    @overload
    def __init__(self, x: dmvec2) -> None: ...
    @overload
    def __init__(self, x: dvec2) -> None: ...
    @overload
    def __init__(self, x: i8vec2) -> None: ...
    @overload
    def __init__(self, x: imvec2) -> None: ...
    @overload
    def __init__(self, x: ivec2) -> None: ...
    @overload
    def __init__(self, x: mvec2) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec2) -> None: ...
    @overload
    def __init__(self, x: umvec2) -> None: ...
    @overload
    def __init__(self, x: uvec2) -> None: ...
    @overload
    def __init__(self, x: vec2) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[2]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> vec2: ...
    def __pos__(self) -> vec2: ...
    def __abs__(self) -> vec2: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> vec2: ...

    @overload
    def __add__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __add__(self, other: vec2) -> vec2: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __iadd__(self, other: vec2) -> vec2: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __sub__(self, other: vec2) -> vec2: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __isub__(self, other: vec2) -> vec2: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __mul__(self, other: mat2x2) -> vec2: ...
    @overload
    def __mul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __mul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __mul__(self, other: vec2) -> vec2: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __imul__(self, other: mat2x2) -> vec2: ...
    @overload
    def __imul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __imul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __imul__(self, other: vec2) -> vec2: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __mod__(self, other: vec2) -> vec2: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __imod__(self, other: vec2) -> vec2: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __pow__(self, other: vec2) -> vec2: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __ipow__(self, other: vec2) -> vec2: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __floordiv__(self, other: vec2) -> vec2: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __ifloordiv__(self, other: vec2) -> vec2: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __truediv__(self, other: mat2x2) -> vec2: ...
    @overload
    def __truediv__(self, other: vec2) -> vec2: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __itruediv__(self, other: mat2x2) -> vec2: ...
    @overload
    def __itruediv__(self, other: vec2) -> vec2: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __matmul__(self, other: mat2x2) -> vec2: ...
    @overload
    def __matmul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __matmul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __matmul__(self, other: vec2) -> vec2: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> vec2: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat]) -> vec2: ...
    @overload
    def __imatmul__(self, other: mat2x2) -> vec2: ...
    @overload
    def __imatmul__(self, other: mat3x2) -> vec3: ...
    @overload
    def __imatmul__(self, other: mat4x2) -> vec4: ...
    @overload
    def __imatmul__(self, other: vec2) -> vec2: ...

    def __divmod__(self, other: vec2) -> Tuple[vec2, vec2]: ...


class vec3:

    x: float
    y: float
    z: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec3) -> None: ...
    @overload
    def __init__(self, x: dmvec3) -> None: ...
    @overload
    def __init__(self, x: dvec3) -> None: ...
    @overload
    def __init__(self, x: i8vec3) -> None: ...
    @overload
    def __init__(self, x: imvec3) -> None: ...
    @overload
    def __init__(self, x: ivec3) -> None: ...
    @overload
    def __init__(self, x: mvec3) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec3) -> None: ...
    @overload
    def __init__(self, x: umvec3) -> None: ...
    @overload
    def __init__(self, x: uvec3) -> None: ...
    @overload
    def __init__(self, x: vec3) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[3]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> vec3: ...
    def __pos__(self) -> vec3: ...
    def __abs__(self) -> vec3: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> vec3: ...

    @overload
    def __add__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __add__(self, other: vec3) -> vec3: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __iadd__(self, other: vec3) -> vec3: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __sub__(self, other: vec3) -> vec3: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __isub__(self, other: vec3) -> vec3: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __mul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __mul__(self, other: mat3x3) -> vec3: ...
    @overload
    def __mul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __mul__(self, other: vec3) -> vec3: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __imul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __imul__(self, other: mat3x3) -> vec3: ...
    @overload
    def __imul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __imul__(self, other: vec3) -> vec3: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __mod__(self, other: vec3) -> vec3: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __imod__(self, other: vec3) -> vec3: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __pow__(self, other: vec3) -> vec3: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __ipow__(self, other: vec3) -> vec3: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __floordiv__(self, other: vec3) -> vec3: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __ifloordiv__(self, other: vec3) -> vec3: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __truediv__(self, other: mat3x3) -> vec3: ...
    @overload
    def __truediv__(self, other: vec3) -> vec3: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __itruediv__(self, other: mat3x3) -> vec3: ...
    @overload
    def __itruediv__(self, other: vec3) -> vec3: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __matmul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __matmul__(self, other: mat3x3) -> vec3: ...
    @overload
    def __matmul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __matmul__(self, other: vec3) -> vec3: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> vec3: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat]) -> vec3: ...
    @overload
    def __imatmul__(self, other: mat2x3) -> vec2: ...
    @overload
    def __imatmul__(self, other: mat3x3) -> vec3: ...
    @overload
    def __imatmul__(self, other: mat4x3) -> vec4: ...
    @overload
    def __imatmul__(self, other: vec3) -> vec3: ...

    def __divmod__(self, other: vec3) -> Tuple[vec3, vec3]: ...


class vec4:

    x: float
    y: float
    z: float
    w: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: SupportsFloat, y: SupportsFloat, z: SupportsFloat, w: SupportsFloat) -> None: ...
    @overload
    def __init__(self, x: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> None: ...
    @overload
    def __init__(self, x: bvec4) -> None: ...
    @overload
    def __init__(self, x: dmvec4) -> None: ...
    @overload
    def __init__(self, x: dvec4) -> None: ...
    @overload
    def __init__(self, x: i8vec4) -> None: ...
    @overload
    def __init__(self, x: imvec4) -> None: ...
    @overload
    def __init__(self, x: ivec4) -> None: ...
    @overload
    def __init__(self, x: mvec4) -> None: ...
    @overload
    def __init__(self, x: u8vec4) -> None: ...
    @overload
    def __init__(self, x: umvec4) -> None: ...
    @overload
    def __init__(self, x: uvec4) -> None: ...
    @overload
    def __init__(self, x: vec4) -> None: ...

    def __len__(self) -> Literal[4]: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: SupportsFloat) -> None: ...
    def __contains__(self, value: Any) -> bool: ...
    def __iter__(self) -> Generator[float, None, None]: ...

    def __neg__(self) -> vec4: ...
    def __pos__(self) -> vec4: ...
    def __abs__(self) -> vec4: ...

    def to_list(self) -> List[float]: ...
    def to_tuple(self) -> Tuple[float, float, float, float]: ...
    def to_bytes(self) -> bytes: ...

    @staticmethod
    def from_bytes(bytes: bytes, /) -> vec4: ...

    @overload
    def __add__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __add__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __add__(self, other: vec4) -> vec4: ...

    @overload
    def __iadd__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __iadd__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __iadd__(self, other: vec4) -> vec4: ...

    @overload
    def __sub__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __sub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __sub__(self, other: vec4) -> vec4: ...

    @overload
    def __isub__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __isub__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __isub__(self, other: vec4) -> vec4: ...

    @overload
    def __mul__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __mul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __mul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __mul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __mul__(self, other: mat4x4) -> vec4: ...
    @overload
    def __mul__(self, other: vec4) -> vec4: ...

    @overload
    def __imul__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __imul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __imul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __imul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __imul__(self, other: mat4x4) -> vec4: ...
    @overload
    def __imul__(self, other: vec4) -> vec4: ...

    @overload
    def __mod__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __mod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __mod__(self, other: vec4) -> vec4: ...

    @overload
    def __imod__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __imod__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __imod__(self, other: vec4) -> vec4: ...

    @overload
    def __pow__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __pow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __pow__(self, other: vec4) -> vec4: ...

    @overload
    def __ipow__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __ipow__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __ipow__(self, other: vec4) -> vec4: ...

    @overload
    def __floordiv__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __floordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __floordiv__(self, other: vec4) -> vec4: ...

    @overload
    def __ifloordiv__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __ifloordiv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __ifloordiv__(self, other: vec4) -> vec4: ...

    @overload
    def __truediv__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __truediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __truediv__(self, other: mat4x4) -> vec4: ...
    @overload
    def __truediv__(self, other: vec4) -> vec4: ...

    @overload
    def __itruediv__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __itruediv__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __itruediv__(self, other: mat4x4) -> vec4: ...
    @overload
    def __itruediv__(self, other: vec4) -> vec4: ...

    @overload
    def __matmul__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __matmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __matmul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __matmul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __matmul__(self, other: mat4x4) -> vec4: ...
    @overload
    def __matmul__(self, other: vec4) -> vec4: ...

    @overload
    def __imatmul__(self, other: SupportsFloat) -> vec4: ...
    @overload
    def __imatmul__(self, other: Tuple[SupportsFloat, SupportsFloat, SupportsFloat, SupportsFloat]) -> vec4: ...
    @overload
    def __imatmul__(self, other: mat2x4) -> vec2: ...
    @overload
    def __imatmul__(self, other: mat3x4) -> vec3: ...
    @overload
    def __imatmul__(self, other: mat4x4) -> vec4: ...
    @overload
    def __imatmul__(self, other: vec4) -> vec4: ...

    def __divmod__(self, other: vec4) -> Tuple[vec4, vec4]: ...

