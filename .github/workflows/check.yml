
name: check

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, '3.10']
        python-arch: [x64]

        exclude:
          - os: macos-latest
            python-version: '3.10'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}-${{ matrix.python-arch }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.python-arch }}

    - name: Upgrade pip & setuptools
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools

    - name: Install Freetype-Py
      env:
        FREETYPEPY_BUNDLE_FT: 1
      run: |
        python -m pip install certifi wheel
        git clone https://github.com/esoma/freetype-py.git
        cd freetype-py
        git checkout 2.11
        python setup.py install

    - name: Install PyICU (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install pkg-config libicu-dev
        python -m pip install --no-binary=:pyicu: pyicu

    - name: Install PyICU (Windows 3.9)
      if: ${{ matrix.os == 'windows-latest' && matrix.python-version == '3.9' }}
      run: |
        curl.exe -L --output PyICU-2.8-cp39-cp39-win_amd64.whl --url https://download.lfd.uci.edu/pythonlibs/x6hvwk7i/PyICU-2.8.1-cp39-cp39-win_amd64.whl
        python -m pip install PyICU-2.8-cp39-cp39-win_amd64.whl

    - name: Install PyICU (Windows 3.10)
      if: ${{ matrix.os == 'windows-latest' && matrix.python-version == '3.10' }}
      run: |
        curl.exe -L --output PyICU-2.8-cp310-cp310-win_amd64.whl --url https://download.lfd.uci.edu/pythonlibs/x6hvwk7i/PyICU-2.8.1-cp310-cp310-win_amd64.whl
        python -m pip install PyICU-2.8-cp310-cp310-win_amd64.whl

    - name: Install PyICU (Mac OS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install pkg-config icu4c
        export PATH="/usr/local/opt/icu4c/bin:/usr/local/opt/icu4c/sbin:$PATH"
        export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/opt/icu4c/lib/pkgconfig"
        unset CC CXX
        python -m pip install --no-binary=:pyicu: pyicu

    - name: Initialize Submodules
      run: |
        git submodule update --init --recursive

    - name: Build Boost
      run: |
        python setup.py build_boost

    - name: Build CGAL
      run: |
        python setup.py build_cgal

    - name: Build Bullet
      run: |
        python setup.py build_bullet

    - name: Build Extensions with coverage
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        python setup.py --build-with-coverage build

    - name: Install Test Dependencies
      run: |
        python -m pip install .[test]
        python -m pip install pytest-xdist pytest-rerunfailures

    - name: Patch pytest-rerunfailures
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        export PYTEST_RERUNFAILURES=`python -c "import pytest_rerunfailures; print(pytest_rerunfailures.__file__)"`
        sed 's/item_location = *$/item_location = item.nodeid/g' $PYTEST_RERUNFAILURES > /tmp/pytest_rerunfailures.py
        cp /tmp/pytest_rerunfailures.py $PYTEST_RERUNFAILURES

    - name: Test (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get install xvfb libopenal1
        sudo modprobe uinput
        sudo chmod a+rw /dev/uinput
        sudo usermod -a -G input $USER
        xvfb-run -a python -m pytest -c pyproject.toml -n auto --cov=gamut --cov-report=xml -k "not controller" --reruns=3 --only-rerun="Not properly terminated"
        sudo -u $USER env PATH=${PATH} xvfb-run -a python -m pytest -n 1 -k "controller" --cov=gamut --cov-report=xml --cov-append --reruns=3 --only-rerun="Not properly terminated"

    - name: Test (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/21.2.4/mesa3d-21.2.4-release-msvc.7z
        "C:\Program Files\7-Zip\7z.exe" e mesa.7z x64/opengl32.dll
        "C:\Program Files\7-Zip\7z.exe" e mesa.7z x64/libglapi.dll
        set GALLIUM_DRIVER=llvmpipe
        set PATH=%cd%;%PATH%
        python -m pytest -c pyproject.toml -n auto --cov=gamut --cov-report=xml --reruns=3 --only-rerun="Not properly terminated"
      shell: cmd

    - name: Test (Mac OS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install openal-soft
        cp /usr/local/opt/openal-soft/lib/libopenal.dylib .
        python -m pytest -c pyproject.toml -n auto --cov=gamut --cov-report=xml --reruns=3 --only-rerun="Not properly terminated"

    - name: Codecov
      uses: codecov/codecov-action@v2


  static-analysis:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - name: Upgrade pip & setuptools
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools

    - name: Install Pre-Commit
      run: |
        python -m pip install pre-commit

    - name: Static Analysis
      run: |
        python -m pre_commit run --all-files

